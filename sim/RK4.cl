/*
 * Copyright (C) 2016 Chi-kwan Chan
 * Copyright (C) 2016 Steward Observatory
 *
 * This file is part of GRay2.
 *
 * GRay2 is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GRay2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GRay2.  If not, see <http://www.gnu.org/licenses/>.
 */

/** \file
 ** Classical 4th-order Runge-Kutta integrator
 **
 ** GRay2 uses OpenCL's just-in-time compilation feature to implement
 ** a run-time configurable algorithms.  In this file we implement the
 ** classical 4th-order Runge-Kutta integrator in integrate().
 **/

/**
 ** OpenCL implementation of the classical 4th-order Runge-Kutta integrator
 **
 ** Assuming rhs() is provided, this function performs the classical
 ** 4th-order Runge-Kutta integrator with a single step size dt.
 **
 ** \return The new state
 **/
real8
integrate(real8 s,  /**< State of the ray */
          real  dt, /**< Step size        */
		  const    real8 bounding_box, /**< Max coordinates of the grid    */
		  __read_only image3d_t Gamma_ttt,
		  __read_only image3d_t Gamma_ttx,
		  __read_only image3d_t Gamma_tty,
		  __read_only image3d_t Gamma_ttz,
		  __read_only image3d_t Gamma_txx,
		  __read_only image3d_t Gamma_txy,
		  __read_only image3d_t Gamma_txz,
		  __read_only image3d_t Gamma_tyy,
		  __read_only image3d_t Gamma_tyz,
		  __read_only image3d_t Gamma_tzz,
		  __read_only image3d_t Gamma_xtt,
		  __read_only image3d_t Gamma_xtx,
		  __read_only image3d_t Gamma_xty,
		  __read_only image3d_t Gamma_xtz,
		  __read_only image3d_t Gamma_xxx,
		  __read_only image3d_t Gamma_xxy,
		  __read_only image3d_t Gamma_xxz,
		  __read_only image3d_t Gamma_xyy,
		  __read_only image3d_t Gamma_xyz,
		  __read_only image3d_t Gamma_xzz,
		  __read_only image3d_t Gamma_ytt,
		  __read_only image3d_t Gamma_ytx,
		  __read_only image3d_t Gamma_yty,
		  __read_only image3d_t Gamma_ytz,
		  __read_only image3d_t Gamma_yxx,
		  __read_only image3d_t Gamma_yxy,
		  __read_only image3d_t Gamma_yxz,
		  __read_only image3d_t Gamma_yyy,
		  __read_only image3d_t Gamma_yyz,
		  __read_only image3d_t Gamma_yzz,
		  __read_only image3d_t Gamma_ztt,
		  __read_only image3d_t Gamma_ztx,
		  __read_only image3d_t Gamma_zty,
		  __read_only image3d_t Gamma_ztz,
		  __read_only image3d_t Gamma_zxx,
		  __read_only image3d_t Gamma_zxy,
		  __read_only image3d_t Gamma_zxz,
		  __read_only image3d_t Gamma_zyy,
		  __read_only image3d_t Gamma_zyz,
		  __read_only image3d_t Gamma_zzz)
{
	real8 k1 = dt * rhs(s,
						bounding_box,
						Gamma_ttt,
						Gamma_ttx,
						Gamma_tty,
						Gamma_ttz,
						Gamma_txx,
						Gamma_txy,
						Gamma_txz,
						Gamma_tyy,
						Gamma_tyz,
						Gamma_tzz,
						Gamma_xtt,
						Gamma_xtx,
						Gamma_xty,
						Gamma_xtz,
						Gamma_xxx,
						Gamma_xxy,
						Gamma_xxz,
						Gamma_xyy,
						Gamma_xyz,
						Gamma_xzz,
						Gamma_ytt,
						Gamma_ytx,
						Gamma_yty,
						Gamma_ytz,
						Gamma_yxx,
						Gamma_yxy,
						Gamma_yxz,
						Gamma_yyy,
						Gamma_yyz,
						Gamma_yzz,
						Gamma_ztt,
						Gamma_ztx,
						Gamma_zty,
						Gamma_ztz,
						Gamma_zxx,
						Gamma_zxy,
						Gamma_zxz,
						Gamma_zyy,
						Gamma_zyz,
						Gamma_zzz);
	real8 k2 = dt * rhs(s + K(0.5) * k1,
						bounding_box,
						Gamma_ttt,
						Gamma_ttx,
						Gamma_tty,
						Gamma_ttz,
						Gamma_txx,
						Gamma_txy,
						Gamma_txz,
						Gamma_tyy,
						Gamma_tyz,
						Gamma_tzz,
						Gamma_xtt,
						Gamma_xtx,
						Gamma_xty,
						Gamma_xtz,
						Gamma_xxx,
						Gamma_xxy,
						Gamma_xxz,
						Gamma_xyy,
						Gamma_xyz,
						Gamma_xzz,
						Gamma_ytt,
						Gamma_ytx,
						Gamma_yty,
						Gamma_ytz,
						Gamma_yxx,
						Gamma_yxy,
						Gamma_yxz,
						Gamma_yyy,
						Gamma_yyz,
						Gamma_yzz,
						Gamma_ztt,
						Gamma_ztx,
						Gamma_zty,
						Gamma_ztz,
						Gamma_zxx,
						Gamma_zxy,
						Gamma_zxz,
						Gamma_zyy,
						Gamma_zyz,
						Gamma_zzz);
	real8 k3 = dt * rhs(s + K(0.5) * k2,
						bounding_box,
						Gamma_ttt,
						Gamma_ttx,
						Gamma_tty,
						Gamma_ttz,
						Gamma_txx,
						Gamma_txy,
						Gamma_txz,
						Gamma_tyy,
						Gamma_tyz,
						Gamma_tzz,
						Gamma_xtt,
						Gamma_xtx,
						Gamma_xty,
						Gamma_xtz,
						Gamma_xxx,
						Gamma_xxy,
						Gamma_xxz,
						Gamma_xyy,
						Gamma_xyz,
						Gamma_xzz,
						Gamma_ytt,
						Gamma_ytx,
						Gamma_yty,
						Gamma_ytz,
						Gamma_yxx,
						Gamma_yxy,
						Gamma_yxz,
						Gamma_yyy,
						Gamma_yyz,
						Gamma_yzz,
						Gamma_ztt,
						Gamma_ztx,
						Gamma_zty,
						Gamma_ztz,
						Gamma_zxx,
						Gamma_zxy,
						Gamma_zxz,
						Gamma_zyy,
						Gamma_zyz,
						Gamma_zzz);
	real8 k4 = dt * rhs(s +          k3,
						bounding_box, /**< Max coordinates of the grid    */
						Gamma_ttt,
						Gamma_ttx,
						Gamma_tty,
						Gamma_ttz,
						Gamma_txx,
						Gamma_txy,
						Gamma_txz,
						Gamma_tyy,
						Gamma_tyz,
						Gamma_tzz,
						Gamma_xtt,
						Gamma_xtx,
						Gamma_xty,
						Gamma_xtz,
						Gamma_xxx,
						Gamma_xxy,
						Gamma_xxz,
						Gamma_xyy,
						Gamma_xyz,
						Gamma_xzz,
						Gamma_ytt,
						Gamma_ytx,
						Gamma_yty,
						Gamma_ytz,
						Gamma_yxx,
						Gamma_yxy,
						Gamma_yxz,
						Gamma_yyy,
						Gamma_yyz,
						Gamma_yzz,
						Gamma_ztt,
						Gamma_ztx,
						Gamma_zty,
						Gamma_ztz,
						Gamma_zxx,
						Gamma_zxy,
						Gamma_zxz,
						Gamma_zyy,
						Gamma_zyz,
						Gamma_zzz);
	return s + (k1 + K(2.0) * (k2 + k3) + k4) / K(6.0);
}
