Massive parallel ODE integrator written in CUDA C/C++
=====================================================

The "GRay" code is a massive parallel ordinary differential equation
integrator that employs the "stream processing paradigm".  It is
designed to efficiently integrate millions of photons in curved
spacetime according to Einstein's general theory of relativity.

The code is implemented in CUDA C/C++.  The following chart
illustrates the structure and flow of GRay:

  main() in "main.cc"
  |
  +-initialize GLUT and create window if OpenGL is enabled
  |
  +-parse arguments
  |
  +-Data::Data() in "data.cc", allocate memory on host and device
  |
  +-Data::init() in "init.cc", includes "*/init.h", initialize data
  |
  +-vis() in "vis.cc" setup visualization if OpenGL is enabled
  | |
  | +-mkshaders() in "shaders.cc"
  | |
  | +-mktexture() in "texture.cc"
  | |
  | +-setup OpenGL
  | |
  | +-regctrl() in "ctrl.cc"
  | |
  | +-register display() and reshape(); display() needs getctrl() in
  |   "ctrl.cc"
  |
  +-solve() in "solve.cc"
    |
    +-dump() in "io.cc" output initial conditions if IO is enabled
    |
    +-mainloop in "solve.cu" by calling back idle() if OpenGL is---<---<---<-+
      enabled or by calling evolve() directly in a while loop;               |
      the idle() function is a smart wrapper that adjust dt_ump              |
      |                                                                      |
      +-evolve() in "evolve.cu"                                              ^
      | |                                                                    |
      | +-register cleanup() in "setup.cc"                                   ^
      | | |                                                                  |
      | | +-free counter and destroy timers                                  ^
      | |                                                                    |
      | +-allocate counter and create CUDA timers                            ^
      | |                                                                    |
      | +-driver() global function in "driver.cu"                            ^
      |   |                                                                  |
      |   +-substep while loop--<---<---<---<---<---<---<---<---<---<---<-+  ^
      |     |                                                             |  |
      |     +-scheme() device function in "scheme/*.cu"                   ^  ^
      |       |                                                           |  |
      |       +-getdt() device function in "*/getdt.cu"                   ^  ^
      |       |                                                           |  |
      |       +-rhs() device function in "*/rhs.cu"->--->--->--->--->--->-+  ^
      |                                                                      |
      +-dump() in "io.cc", see above                                         ^
      |                                                                      |
      +-call the control call-backs; request graphics update and loop back->-+
