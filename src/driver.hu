// Copyright (C) 2012 Chi-kwan Chan
// Copyright (C) 2012 Steward Observatory
//
// This file is part of geode.
//
// Geode is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Geode is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
// License for more details.
//
// You should have received a copy of the GNU General Public License
// along with geode.  If not, see <http://www.gnu.org/licenses/>.

#ifdef USE_PARTICLE_TIME
#  define GET_TIME (t = shared[threadIdx.x].t)
#else
#  define GET_TIME t
#endif

static __global__ void driver(State *state, size_t *count, size_t n,
                              real t, real target)
{
  extern __shared__ State shared[]; // dynamic shared variable

  n     -= blockIdx.x * blockDim.x;
  state += blockIdx.x * blockDim.x;
  count += blockIdx.x * blockDim.x;

  for(int i = 0, j = threadIdx.x; i < NVAR; ++i, j += blockDim.x)
    if(j < NVAR * n)
      ((real *)shared)[j] = ((real *)state)[j];

  __syncthreads();

  if(threadIdx.x < n) {
    size_t c = 0;

    if(t < target)
      while(GET_TIME < target && !done(shared[threadIdx.x], t)) {
        scheme(shared[threadIdx.x], t, target - t);
        ++c;
      }
    else
      while(GET_TIME > target &&  !done(shared[threadIdx.x], t)) {
        scheme(shared[threadIdx.x], t, target - t);
        ++c;
      }

    count[threadIdx.x] = c;
  }

  __syncthreads();

  for(int i = 0, j = threadIdx.x; i < NVAR; ++i, j += blockDim.x)
    if(j < NVAR * n)
      ((real *)state)[j] = ((real *)shared)[j];
}

#undef GET_TIME
